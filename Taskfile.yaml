version: '3'

env:
  AZURE_DEVOPS_EXT_PAT: $(security find-generic-password -w -a ado-token)
  PYPI_TOKEN: $(security find-generic-password -w -a pypi)
  ADO_ORGANIZATION_URL: 'https://dev.azure.com/RussellBoley'
  ADO_PROJECT_NAME: "Learning"
  PYTHONPATH: "."

tasks:
  install:
    desc: Install project dependencies
    cmds:
      - uv sync
    sources:
      - pyproject.toml
    generates:
      - uv.lock
      - .venv/pyvenv.cfg

  test:
    desc: Run project tests in parallel
    cmds:
      - uv run pytest -v -n auto --junitxml=pytest-results.xml

  test-sequential:
    desc: Run project tests sequentially (for debugging)
    cmds:
      - uv run pytest -v

  test-single:
    desc: Run a single test (use TEST_NAME variable)
    cmds:
      - uv run pytest {{.TEST_NAME}} -v -s

  coverage:
    desc: Generate code coverage report
    cmds:
      -  uv run pytest -v --cov -n auto

  format:
    desc: Format code with ruff
    cmds:
      - uv run ruff format .
      - uv run ruff check --fix .

  format-check:
    desc: Check code formatting without making changes
    cmds:
      - uv run ruff format --check .
      - uv run ruff check .

  typecheck:
    desc: Run type checking with mypy
    cmds:
      - uv run mypy .

  run:
    desc: Run the FastAPI application
    cmds:
      - uv run python server.py

  inspect:
    desc: Run the MCP Inspector on the server
    deps:
      - task: install
    cmds:
      - fastmcp dev server.py

  auth-test:
    desc: test your ado token
    cmds:
      - curl -s -u ":$AZURE_DEVOPS_EXT_PAT" "$ADO_ORGANIZATION_URL/_apis/ConnectionData?api-version=7.1-preview" | jq .

  setup-env:
    desc: "Create .env file with credentials if it doesn't exist"
    cmds:
      - echo "AZURE_DEVOPS_EXT_PAT=$(security find-generic-password -w -a ado-token)" > .env
      - echo "ADO_ORGANIZATION_URL={{.ADO_ORGANIZATION_URL}}" >> .env
      - echo "ADO_PROJECT_NAME={{.ADO_PROJECT_NAME}}" >> .env
    status:
      - test -f .env

  build:
    desc: Build the package for distribution
    cmds:
      - rm -rf dist/
      - uv build
    generates:
      - dist/*.whl
      - dist/*.tar.gz

  publish:
    desc: Publish package to PyPI
    deps:
      - task: build
    cmds:
      - |
        echo "Publishing ado-mcp-raboley version $(python -c 'import ado; print(ado.__version__)')"
        uv publish --token $PYPI_TOKEN

  publish-test:
    desc: Publish package to Test PyPI
    deps:
      - task: test
      - task: format-check
      - task: typecheck
      - task: build
    cmds:
      - |
        echo "Publishing ado-mcp-raboley version $(python -c 'import ado; print(ado.__version__)') to Test PyPI"
        uv publish --publish-url https://test.pypi.org/legacy/ --token $PYPI_TOKEN